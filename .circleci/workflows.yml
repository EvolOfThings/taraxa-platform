version: 2.1

orbs:
  docker: circleci/docker@1.7.0

parameters:
  ui-package-modified:
    type: boolean
    default: false
  run-community-site-service-workflow:
    type: boolean
    default: false

aliases:
  - &build_config
    docker:
      - image: alpine:3.14
  - &step_setup_remote_docker
    setup_remote_docker:
      version: 19.03.14
      docker_layer_caching: true
  - &step_install_deps
    run:
      name: Install dependencies
      shell: /bin/sh -eo pipefail
      command: |
        apk add docker-cli
  - &step_prepare_environment
    run:
      name: Prepare Environment
      shell: /bin/sh -eo pipefail
      command: |
        if [ "${CIRCLE_BRANCH}" == "develop" ]; then
          export ENV=stage
          echo 'export ENV=stage' >> $BASH_ENV
        elif [ "${CIRCLE_BRANCH}" == "main" ]; then
          export ENV=prod
          echo 'export ENV=prod' >> $BASH_ENV
        else
          echo 'Unknown branch' >&2
          exit 1
        fi
        echo "export IMAGE=taraxa-community-frontend" >> $BASH_ENV
        echo "export GCP_IMAGE=gcr.io/${GOOGLE_PROJECT_ID}/${IMAGE}" >> $BASH_ENV
        echo "export VERSION=$(git rev-parse --short HEAD)" >> $BASH_ENV
jobs:
  build-community-site:
    <<: *build_config
    steps:
      - checkout
      - *step_setup_remote_docker
      - *step_install_deps
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/sh -eo pipefail
          command: |
            docker build --build-arg NODE_ENV=${ENV} -t ${IMAGE}:${VERSION} -f services/community-site/Dockerfile .
      - run:
          name: Tag and push images
          command: |
            if [ "${ENV}" == "main" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag ${IMAGE}:${VERSION} taraxa/${IMAGE}:${VERSION}
              docker tag ${IMAGE}:${VERSION} taraxa/${IMAGE}:latest
              docker push taraxa/${IMAGE}:${VERSION}
              docker push taraxa/${IMAGE}:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag ${IMAGE}:${VERSION} ${GCP_IMAGE}-develop:${VERSION}
              docker tag ${IMAGE}:${VERSION} ${GCP_IMAGE}-develop:latest
              docker push ${GCP_IMAGE}-develop:${VERSION}
              docker push ${GCP_IMAGE}-develop:latest
            fi
workflows:
  community-site:
    when:
      or:
        - << pipeline.parameters.run-community-site-service-workflow >>
        - << pipeline.parameters.ui-package-modified >>
    jobs:
      - build-community-site:
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
