version: 2.1

orbs:
  docker: circleci/docker@1.7.0

parameters:
  ui-package-modified:
    type: boolean
    default: false
  run-community-site-service-workflow:
    type: boolean
    default: false

aliases:
  - &config
    docker:
      - image: alpine:3.14
  - &step_setup_remote_docker
    setup_remote_docker:
      version: 19.03.14
      docker_layer_caching: true
  - &step_install_deps
    run:
      name: Install dependencies
      shell: /bin/sh -eo pipefail
      command: |
        apk add --update openssl openssh-client sudo git bash curl docker-cli
  - &step_install_deploy_deps
    run:
      name: Install deploy dependencies
      shell: /bin/sh -eo pipefail
      command: |
        mkdir -p $HOME/.kube
        echo -n "${KUBE_CONFIG}" | base64 -d > $HOME/.kube/config
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo cp kubectl /usr/local/bin 
        sudo chmod +x /usr/local/bin/kubectl
  - &step_prepare_environment
    run:
      name: Prepare Environment
      shell: /bin/bash -eo pipefail
      command: |
        if [ "${CIRCLE_BRANCH}" == "develop" ]; then
          export ENV=stage
          echo 'export ENV=stage' >> $BASH_ENV
        elif [ "${CIRCLE_BRANCH}" == "main" ]; then
          export ENV=prod
          echo 'export ENV=prod' >> $BASH_ENV
        else
          echo 'Unknown branch' >&2
          exit 1
        fi
        echo "export IMAGE=taraxa-community-frontend" >> $BASH_ENV
        echo "export GCP_REGISTRY=gcr.io/${GOOGLE_PROJECT_ID}" >> $BASH_ENV
        echo "export VERSION=$(git rev-parse --short HEAD)" >> $BASH_ENV
jobs:
  build-community-site:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Build image
          shell: /bin/bash -eo pipefail
          command: |
            docker build --build-arg NODE_ENV=${ENV} -t ${IMAGE}:${VERSION} -f services/community-site/Dockerfile .
      - run:
          name: Tag and push images
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              echo ${DOCKERHUB_PASS} | docker login -u taraxa --password-stdin

              docker tag ${IMAGE}:${VERSION} taraxa/${IMAGE}:${VERSION}
              docker tag ${IMAGE}:${VERSION} taraxa/${IMAGE}:latest
              docker push taraxa/${IMAGE}:${VERSION}
              docker push taraxa/${IMAGE}:latest
            else
              echo ${GCLOUD_SERVICE_KEY} | docker login -u _json_key --password-stdin https://gcr.io

              docker tag ${IMAGE}:${VERSION} ${GCP_REGISTRY}/${IMAGE}-develop:${VERSION}
              docker tag ${IMAGE}:${VERSION} ${GCP_REGISTRY}/${IMAGE}-develop:latest
              docker push ${GCP_REGISTRY}/${IMAGE}-develop:${VERSION}
              docker push ${GCP_REGISTRY}/${IMAGE}-develop:latest
            fi
  deploy-community-site:
    <<: *config
    steps:
      - *step_install_deps
      - checkout
      - *step_install_deploy_deps
      - *step_setup_remote_docker
      - *step_prepare_environment
      - run:
          name: Deploy
          shell: /bin/bash -eo pipefail
          command: |
            if [ "${ENV}" == "prod" ]; then
              export NS=taraxa-community-prod
              export HELM_NAME=taraxa-community
              export HELM_CONFIG=prod.values.yaml
            else
              export NS=taraxa-community-qa
              export HELM_NAME=qa-taraxa-community-site
              export HELM_CONFIG=qa.values.yaml
            fi

            helm upgrade -i ${HELM_NAME} services/community-site/charts/community-site/
              --namespace ${NS}
              -f services/community-site/charts/community-site/values.yaml
              -f services/community-site/charts/${HELM_CONFIG} \
              --set image.tag=${VERSION}
workflows:
  community-site:
    when:
      or:
        - << pipeline.parameters.run-community-site-service-workflow >>
        - << pipeline.parameters.ui-package-modified >>
    jobs:
      - build-community-site:
          context:
            - TARAXA
            - DOCKERHUB
            - GCR
      - deploy-community-site:
          requires:
            - build-community-site
          context:
            - K8S
